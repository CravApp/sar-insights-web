"""
Aplicaci√≥n Web de Monitoreo de Degradaci√≥n Forestal - Madre de Dios, Per√∫
Desarrollado para NASA Space Apps Challenge
Utiliza datos SAR (Sentinel-1) y algoritmos de IA para detectar degradaci√≥n forestal
"""

import streamlit as st
import folium
from streamlit_folium import folium_static
import geopandas as gpd
import rasterio
from rasterio.plot import show
import numpy as np
import pandas as pd
from pathlib import Path
import json
from folium import plugins
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import base64
from io import BytesIO


# Configuraci√≥n de p√°gina con fondo oscuro, gradiente o imagen, y estilos de texto
st.set_page_config(
    page_title="Forest Degradation Monitor - Madre de Dios",
    page_icon="üõ∞Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Puedes cambiar la URL de background-image si prefieres una imagen en vez de gradiente
st.markdown("""
<style>
    .stApp {
        /* Fondo gradiente oscuro o imagen */
        background: linear-gradient(135deg, #181c2b 0%, #232946 100%);
        /* background-image: url('https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=1500&q=80');
        background-size: cover; */
    }
    .block-container {
        background: rgba(30, 30, 40, 0.85);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 32px rgba(0,0,0,0.25);
    }
    /* Texto general blanco */
    .stApp *, .block-container * {
        color: #fff !important;
    }
    /* T√≠tulos y subt√≠tulos en blanco y negrita */
    h1, h2, h3, h4, h5, h6 {
        color: #fff !important;
        font-weight: bold !important;
        letter-spacing: 0.5px;
        font-family: 'Arial', sans-serif;
    }
    /* P√°rrafos y contenido normal */
    p, li, span, label, .markdown-text-container {
        color: #fff !important;
        font-weight: normal !important;
    }
    /* Sidebar oscuro */
    .stSidebar {
        background: #232946 !important;
    }
    /* Botones */
    .stButton>button {
        background: #3a86ff;
        color: #fff;
        border-radius: 6px;
        border: none;
        padding: 10px 20px;
        font-weight: bold;
        transition: background 0.2s;
    }
    .stButton>button:hover {
        background: #265d97;
    }
</style>
""", unsafe_allow_html=True)


# ==================== HELPER FUNCTIONS ====================

def load_raster(file_path):
    """
    Loads a GeoTIFF raster file and returns data and metadata
    Args:
        file_path (str): Path to the GeoTIFF file
    Returns:
        tuple: (data_array, transform, bounds, crs) or None if fails
    """
    try:
        with rasterio.open(file_path) as src:
            data = src.read(1)  # Read first band
            transform = src.transform
            bounds = src.bounds
            crs = src.crs
            
            # Replace invalid values
            data = np.where(data == src.nodata, np.nan, data)
            return data, transform, bounds, crs
    except FileNotFoundError:
        st.warning(f"‚ö†Ô∏è File not found: {file_path}")
        return None
    except Exception as e:
        st.error(f"‚ùå Error loading {file_path}: {str(e)}")
        return None

def load_geojson(file_path):
    """
    Loads a GeoJSON file (alerts)
    Args:
        file_path (str): Path to the GeoJSON file
    Returns:
        GeoDataFrame or None if fails
    """
    try:
        gdf = gpd.read_file(file_path)
        return gdf
    except FileNotFoundError:
        st.warning(f"‚ö†Ô∏è File not found: {file_path}")
        return None
    except Exception as e:
        st.error(f"‚ùå Error loading {file_path}: {str(e)}")
        return None

def create_colormap(layer_type):
    """
    Create custom colormaps for each layer type
    Args:
        layer_type (str): Layer type (vv, vh, ratio, cusum, classification)
    Returns:
        LinearSegmentedColormap
    """
    colormaps = {
        'vv': LinearSegmentedColormap.from_list('vv', ['#000080', '#4169E1', '#87CEEB']),
        'vh': LinearSegmentedColormap.from_list('vh', ['#2F4F4F', '#20B2AA', '#AFEEEE']),
        'ratio': LinearSegmentedColormap.from_list('ratio', ['#8B4513', '#DAA520', '#FFD700']),
        'cusum': LinearSegmentedColormap.from_list('cusum', ['#006400', '#FFFF00', '#FF4500']),
        'classification': LinearSegmentedColormap.from_list(
            'classification', 
            ['#228B22', '#ADFF2F', '#FFD700', '#FF8C00', '#FF0000']
        )
    }
    return colormaps.get(layer_type, plt.cm.viridis)

def add_raster_to_map(folium_map, data, bounds, layer_name, colormap, opacity=0.6):
    """
    Add a raster layer to the Folium map
    Args:
        folium_map: Folium map object
        data: Numpy array with raster data
        bounds: Geographic bounds (minx, miny, maxx, maxy)
        layer_name: Layer name
        colormap: Matplotlib colormap
        opacity: Layer opacity (0-1)
    """
    try:
        # Normalize data
        data_norm = (data - np.nanmin(data)) / (np.nanmax(data) - np.nanmin(data))
        # Create RGBA image
        colored_data = colormap(data_norm)
        # Convert to PIL image for Folium
        from PIL import Image
        img = Image.fromarray((colored_data * 255).astype(np.uint8))
        # Create in-memory image
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        buffer.seek(0)
        encoded = base64.b64encode(buffer.getvalue()).decode()
        # Add as ImageOverlay
        folium.raster_layers.ImageOverlay(
            image=f'data:image/png;base64,{encoded}',
            bounds=[[bounds[1], bounds[0]], [bounds[3], bounds[2]]],
            opacity=opacity,
            name=layer_name,
            overlay=True,
            control=True
        ).add_to(folium_map)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Could not add layer {layer_name}: {str(e)}")

def add_geojson_to_map(folium_map, gdf, layer_name):
    """
    Add GeoJSON alerts to the map
    Args:
        folium_map: Folium map object
        gdf: GeoDataFrame with alerts
        layer_name: Layer name
    """
    try:
        folium.GeoJson(
            gdf,
            name=layer_name,
            style_function=lambda x: {
                'fillColor': '#FF0000',
                'color': '#8B0000',
                'weight': 2,
                'fillOpacity': 0.4
            },
            highlight_function=lambda x: {'weight': 3, 'fillOpacity': 0.7},
            tooltip=folium.GeoJsonTooltip(fields=['id', 'severity'] if 'severity' in gdf.columns else None)
        ).add_to(folium_map)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Could not add alerts: {str(e)}")

# ==================== CONFIGURACI√ìN INICIAL ====================

# Crear estructura de directorios simulada (en producci√≥n, estos archivos existir√≠an)
DATA_DIR = Path("data")
RASTER_DIR = DATA_DIR / "rasters"
VECTOR_DIR = DATA_DIR / "vectors"

# ==================== HEADER ====================

col1, col2, col3 = st.columns([1, 3, 1])

with col1:
    st.markdown("""
    <div style='text-align: center; padding: 10px;'>
        <div style='font-size: 60px;'>üõ∞Ô∏è</div>
    </div>
    """, unsafe_allow_html=True)

with col2:
    st.markdown("""
    <h1 style='text-align: center; margin-bottom: 0;'>
        üå≥ Forest Degradation Monitor
    </h1>
    <h3 style='text-align: center; color: #FFFFFF; margin-top: 0;'>
        Madre de Dios, Per√∫ - Regi√≥n Amaz√≥nica
    </h3>
    """, unsafe_allow_html=True)

with col3:
    st.markdown("""
    <div style='text-align: center; padding: 10px;'>
        <div style='font-size: 60px;'>üåé</div>
    </div>
    """, unsafe_allow_html=True)

st.markdown("---")

# ==================== SIDEBAR - CONTROLES ====================

with st.sidebar:
    st.markdown("### üéõÔ∏è Control de Capas")
    
    st.markdown("#### Datos SAR Sentinel-1")
    show_vv = st.checkbox("üì° Retrodispersi√≥n VV", value=False, 
                          help="Polarizaci√≥n vertical-vertical (VV) - Sensible a estructura vertical del bosque")
    show_vh = st.checkbox("üì° Retrodispersi√≥n VH", value=False,
                          help="Polarizaci√≥n vertical-horizontal (VH) - Sensible a biomasa y follaje")
    show_ratio = st.checkbox("üìä Ratio VH/VV", value=False,
                            help="√çndice de volumen de dispersi√≥n - detecta cambios en estructura del dosel")
    
    st.markdown("#### An√°lisis de Cambio")
    show_cusum = st.checkbox("üìà Rsum_max (CuSum)", value=True,
                            help="Suma acumulada de cambios - detecta degradaci√≥n temporal")
    
    st.markdown("#### Clasificaci√≥n IA")
    show_classification = st.checkbox("ü§ñ Mapa de Clasificaci√≥n (RF/U-TAE)", value=True,
                                     help="Resultado de Random Forest o U-TAE Transformer")
    show_alerts = st.checkbox("üö® Alertas de Degradaci√≥n", value=True,
                             help="Pol√≠gonos de √°reas con cambio detectado")
    
    st.markdown("---")
    st.markdown("#### ‚öôÔ∏è Configuraci√≥n del Mapa")
    opacity = st.slider("Opacidad de capas", 0.0, 1.0, 0.6, 0.1)
    
    st.markdown("---")
    st.markdown("#### üì• Exportaci√≥n")
    
    export_format = st.selectbox("Formato de exportaci√≥n", ["GeoJSON", "PNG", "GeoTIFF"])
    
    if st.button("‚¨áÔ∏è Descargar Vista Actual"):
        st.info("üîÑ Funcionalidad de exportaci√≥n implementada en desarrollo")
        # En producci√≥n: implementar exportaci√≥n real seg√∫n formato seleccionado

# ==================== MAPA PRINCIPAL ====================

st.markdown("### üó∫Ô∏è Mapa Interactivo de Monitoreo")

# Coordenadas de Madre de Dios, Per√∫
MADRE_DE_DIOS_CENTER = [-12.5, -70.0]
INITIAL_ZOOM = 7

# Crear mapa base
m = folium.Map(
    location=MADRE_DE_DIOS_CENTER,
    zoom_start=INITIAL_ZOOM,
    tiles='OpenStreetMap',
    control_scale=True
)

# A√±adir capas base alternativas
folium.TileLayer('Stamen Terrain', name='Terreno',attr='Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.').add_to(m)
folium.TileLayer(
    tiles='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
    attr='Esri',
    name='Sat√©lite Esri',
    overlay=False,
    control=True
).add_to(m)

# NOTA: En producci√≥n, cargar archivos reales. Aqu√≠ simulamos la l√≥gica
# Rutas de archivos (ajustar seg√∫n tu estructura)
raster_files = {
    'vv': RASTER_DIR / "vv_backscatter.tif",
    'vh': RASTER_DIR / "vh_backscatter.tif",
    'ratio': RASTER_DIR / "vh_vv_ratio.tif",
    'cusum': RASTER_DIR / "rsum_max_cusum.tif",
    'classification': RASTER_DIR / "class_map.tif"
}

alerts_file = VECTOR_DIR / "alerts.geojson"

# Cargar y a√±adir capas seg√∫n selecci√≥n del usuario
layer_config = {
    'vv': (show_vv, 'VV Backscatter', 'vv'),
    'vh': (show_vh, 'VH Backscatter', 'vh'),
    'ratio': (show_ratio, 'VH/VV Ratio', 'ratio'),
    'cusum': (show_cusum, 'CuSum Rsum_max', 'cusum'),
    'classification': (show_classification, 'Clasificaci√≥n RF/IA', 'classification')
}

# Informaci√≥n de ejemplo (en producci√≥n, se cargar√≠an archivos reales)
st.info("""
üìå **Nota de Demostraci√≥n:** Esta es una interfaz de visualizaci√≥n. 
En producci√≥n, los archivos GeoTIFF y GeoJSON se cargar√≠an desde el directorio `data/`.
Para probar con datos reales, coloca tus archivos en:
- `data/rasters/` ‚Üí archivos `.tif` (vv_backscatter.tif, vh_backscatter.tif, etc.)
- `data/vectors/` ‚Üí archivo `alerts.geojson`
""")

# Simular carga de capas (en producci√≥n descomentar)
for key, (show_layer, layer_name, cmap_type) in layer_config.items():
    if show_layer:
        # Descomenta esto en producci√≥n con archivos reales:
        # result = load_raster(raster_files[key])
        # if result:
        #     data, transform, bounds, crs = result
        #     colormap = create_colormap(cmap_type)
        #     add_raster_to_map(m, data, bounds, layer_name, colormap, opacity)
        pass

# Cargar alertas
if show_alerts:
    # Descomenta en producci√≥n:
    # gdf_alerts = load_geojson(alerts_file)
    # if gdf_alerts is not None:
    #     add_geojson_to_map(m, gdf_alerts, "Alertas de Degradaci√≥n")
    pass

# A√±adir marcador de ejemplo en Madre de Dios
folium.Marker(
    MADRE_DE_DIOS_CENTER,
    popup="<b>Madre de Dios</b><br>Regi√≥n de Monitoreo",
    tooltip="Centro de monitoreo",
    icon=folium.Icon(color='red', icon='info-sign')
).add_to(m)

# A√±adir control de capas
folium.LayerControl().add_to(m)

# A√±adir plugin de b√∫squeda de coordenadas
plugins.Geocoder().add_to(m)

# A√±adir medidor de distancia
plugins.MeasureControl(position='topleft', primary_length_unit='kilometers').add_to(m)

# Mostrar mapa
folium_static(m, width=1400, height=600)

# ==================== LEYENDA ====================

st.markdown("### üìä Leyenda de Capas Activas")

legend_cols = st.columns(5)

with legend_cols[0]:
    if show_cusum:
        st.markdown("""
        **CuSum (Rsum_max)**
        - üü¢ Verde: Sin cambio
        - üü° Amarillo: Cambio moderado
        - üî¥ Rojo: Cambio significativo
        """)

with legend_cols[1]:
    if show_classification:
        st.markdown("""
        **Clasificaci√≥n**
        - üü¢ Verde oscuro: Bosque intacto
        - üü¢ Verde claro: Bosque secundario
        - üü° Amarillo: Degradaci√≥n leve
        - üü† Naranja: Degradaci√≥n severa
        - üî¥ Rojo: Deforestaci√≥n
        """)

with legend_cols[2]:
    if show_vv:
        st.markdown("""
        **VV Backscatter**
        - Azul oscuro ‚Üí Azul claro
        - Mayor retrodispersi√≥n indica
        - mayor estructura vertical
        """)

with legend_cols[3]:
    if show_vh:
        st.markdown("""
        **VH Backscatter**
        - Verde oscuro ‚Üí Cian
        - Relacionado con biomasa
        - y densidad de follaje
        """)

with legend_cols[4]:
    if show_alerts:
        st.markdown("""
        **Alertas**
        - üî¥ Pol√≠gonos rojos
        - √Åreas con cambio detectado
        - Requieren verificaci√≥n
        """)

# ==================== CASOS DE ESTUDIO ====================

st.markdown("---")
st.markdown("### üìç Casos de Estudio")

case_studies = {
    "Caso 1: Miner√≠a Ilegal - R√≠o Malinowski": {
        "coords": [-12.8, -70.2],
        "zoom": 12,
        "description": """
        **Zona afectada por miner√≠a aur√≠fera ilegal**
        
        - **Coordenadas:** 12¬∞48'S, 70¬∞12'W
        - **√Årea afectada:** ~450 hect√°reas
        - **Per√≠odo:** 2020-2024
        - **Detecci√≥n:** Cambio abrupto en VV backscatter y aumento de Rsum_max
        - **Impacto:** Deforestaci√≥n completa, contaminaci√≥n de r√≠os con mercurio
        - **Estado:** Alerta roja activa, requiere intervenci√≥n inmediata
        """
    },
    "Caso 2: Tala Selectiva - Reserva Tambopata": {
        "coords": [-12.3, -69.5],
        "zoom": 12,
        "description": """
        **Degradaci√≥n gradual por extracci√≥n maderera**
        
        - **Coordenadas:** 12¬∞18'S, 69¬∞30'W
        - **√Årea afectada:** ~1,200 hect√°reas
        - **Per√≠odo:** 2021-2024
        - **Detecci√≥n:** Disminuci√≥n progresiva de VH/VV ratio
        - **Impacto:** P√©rdida de 30% de cobertura de dosel, fragmentaci√≥n del h√°bitat
        - **Estado:** Alerta naranja, degradaci√≥n en curso
        """
    },
    "Caso 3: Carretera Interoce√°nica - Zona de Amortiguamiento": {
        "coords": [-12.6, -69.8],
        "zoom": 11,
        "description": """
        **Deforestaci√≥n asociada a infraestructura vial**
        
        - **Coordenadas:** 12¬∞36'S, 69¬∞48'W
        - **√Årea afectada:** ~2,800 hect√°reas
        - **Per√≠odo:** 2019-2024
        - **Detecci√≥n:** Patr√≥n lineal de cambio en clasificaci√≥n multitemporal
        - **Impacto:** Deforestaci√≥n de 15 km a cada lado de carretera, invasiones
        - **Estado:** Monitoreo continuo, expansi√≥n predecible
        """
    }
}

selected_case = st.selectbox(
    "Selecciona un caso de estudio para explorar:",
    ["Ninguno"] + list(case_studies.keys())
)

if selected_case != "Ninguno":
    case_info = case_studies[selected_case]
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Crear mapa espec√≠fico del caso
        case_map = folium.Map(
            location=case_info["coords"],
            zoom_start=case_info["zoom"],
            tiles='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
            attr='Esri'
        )
        
        # A√±adir marcador
        folium.Marker(
            case_info["coords"],
            popup=f"<b>{selected_case}</b>",
            icon=folium.Icon(color='red', icon='exclamation-sign')
        ).add_to(case_map)
        
        # A√±adir c√≠rculo de √°rea afectada
        folium.Circle(
            case_info["coords"],
            radius=2000,
            color='red',
            fill=True,
            fillColor='red',
            fillOpacity=0.2,
            popup="√Årea de estudio"
        ).add_to(case_map)
        
        folium_static(case_map, width=800, height=400)
    
    with col2:
        st.markdown(f"""
        <div class='case-study-box'>
        {case_info["description"]}
        </div>
        """, unsafe_allow_html=True)

# ==================== ESTAD√çSTICAS Y M√âTRICAS ====================

st.markdown("---")
st.markdown("### üìà Estad√≠sticas de Monitoreo")

metric_cols = st.columns(4)

# Datos de ejemplo (en producci√≥n calcular de rasters reales)
with metric_cols[0]:
    st.metric(
        label="√Årea Total Monitoreada",
        value="8.5M ha",
        delta="‚Üë 0.5M ha este mes"
    )

with metric_cols[1]:
    st.metric(
        label="Alertas Activas",
        value="247",
        delta="‚Üë 23 vs. mes anterior",
        delta_color="inverse"
    )

with metric_cols[2]:
    st.metric(
        label="Degradaci√≥n Detectada",
        value="12,450 ha",
        delta="‚Üë 8.3% este trimestre",
        delta_color="inverse"
    )

with metric_cols[3]:
    st.metric(
        label="Precisi√≥n del Modelo",
        value="94.2%",
        delta="‚Üë 2.1% con U-TAE"
    )

# ==================== INFORMACI√ìN T√âCNICA ====================

with st.expander("‚ÑπÔ∏è Informaci√≥n T√©cnica del Sistema"):
    st.markdown("""
    ### Metodolog√≠a de Detecci√≥n
    
    **Datos Utilizados:**
    - Im√°genes SAR Sentinel-1 (C-band, 5.405 GHz)
    - Polarizaciones: VV y VH
    - Resoluci√≥n espacial: 10m
    - Frecuencia temporal: 6-12 d√≠as
    
    **Algoritmos de IA:**
    1. **Random Forest (RF):** Clasificaci√≥n supervisada con 500 √°rboles de decisi√≥n
        - Features: VV, VH, VH/VV, GLCM textures, temporal statistics
        - Accuracy: 91.5% (validation set)
    
    2. **U-TAE Transformer:** Red neuronal para an√°lisis temporal
        - Arquitectura: U-Net + Temporal Attention Encoder
        - Input: Serie temporal de 24 im√°genes (2 a√±os)
        - Accuracy: 94.2% (validation set)
    
    **M√©tricas de Cambio:**
    - **CuSum (Rsum_max):** Suma acumulada de residuos para detectar cambios graduales
    - **Diferencias multi-temporales:** An√°lisis de tendencias en backscatter
    - **√çndices de textura:** GLCM (Gray-Level Co-occurrence Matrix)
    
    **Validaci√≥n:**
    - Ground truth: Verificaci√≥n en campo y im√°genes de alta resoluci√≥n
    - M√©tricas: Precision, Recall, F1-Score, Overall Accuracy
    - Validaci√≥n cruzada espacial para evitar overfitting
    """)

with st.expander("üîß Instrucciones de Uso"):
    st.markdown("""
    ### C√≥mo usar esta aplicaci√≥n
    
    1. **Explorar el mapa:** Usa el zoom y el arrastre para navegar por Madre de Dios
    
    2. **Activar capas:** En la barra lateral, marca las capas que deseas visualizar
        - Combina m√∫ltiples capas para an√°lisis integral
        - Ajusta la opacidad para mejor visualizaci√≥n
    
    3. **Casos de estudio:** Selecciona un caso en el men√∫ desplegable para ver ejemplos reales
    
    4. **Herramientas del mapa:**
        - üîç Buscar ubicaciones espec√≠ficas (esquina superior derecha)
        - üìè Medir distancias (esquina superior izquierda)
        - üó∫Ô∏è Cambiar capa base (control de capas)
    
    5. **Exportar datos:** Usa el bot√≥n de descarga en la barra lateral
        - GeoJSON: Para an√°lisis en GIS
        - PNG: Para reportes y presentaciones
        - GeoTIFF: Para an√°lisis raster avanzado
    
    6. **Interpretar resultados:**
        - Verde: Bosque saludable, sin cambios
        - Amarillo/Naranja: Degradaci√≥n detectada, requiere monitoreo
        - Rojo: Deforestaci√≥n o cambio severo, requiere acci√≥n inmediata
    """)

# ==================== FOOTER ====================

st.markdown("---")

footer_cols = st.columns(3)

with footer_cols[0]:
    st.markdown("""
    **üõ∞Ô∏è NASA Space Apps Challenge**  
    Desarrollado con datos Sentinel-1 (ESA)  
    Copernicus Programme
    """)

with footer_cols[1]:
    st.markdown("""
    **üìß Contacto**  
    forestmonitor@example.com  
    [GitHub Repository](#)
    """)

with footer_cols[2]:
    st.markdown("""
    **üìÖ √öltima Actualizaci√≥n**  
    Datos: 28 Septiembre 2024  
    Modelo: U-TAE v2.1
    """)

st.markdown("""
<div style='text-align: center; color: #AAAAAA; font-size: 12px; margin-top: 20px;'>
    Madre de Dios Forest Monitoring System v1.0 | 2024  
    Powered by Sentinel-1, Streamlit & Python
</div>
""", unsafe_allow_html=True)
